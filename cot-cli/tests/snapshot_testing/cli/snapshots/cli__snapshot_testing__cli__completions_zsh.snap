---
source: cot-cli/tests/snapshot_testing/cli/mod.rs
info:
  program: cot
  args:
    - cli
    - completions
    - zsh
---
success: true
exit_code: 0
----- stdout -----
#compdef cot

autoload -U is-at-least

_cot() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_cot_commands" \
"*::: :->cot" \
&& ret=0
    case $state in
    (cot)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" : \
'--name=[Set the resulting crate name (defaults to the directory name)]:NAME:_default' \
'--cot-path=[Use \`cot\` from the specified path instead of a published crate]:COT_PATH:_files' \
'--use-git[Use the latest \`cot\` version from git instead of a published crate]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
':path -- Path to the directory to create the new project in:_files' \
&& ret=0
;;
(migration)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cot__migration_commands" \
"*::: :->migration" \
&& ret=0

    case $state in
    (migration)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-migration-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'::path -- Path to the crate directory to list migrations for  \[default\: current directory\]:_files' \
&& ret=0
;;
(make)
_arguments "${_arguments_options[@]}" : \
'--app-name=[Name of the app to use in the migration (default\: crate name)]:APP_NAME:_default' \
'--output-dir=[Directory to write the migrations to (default\: migrations/ directory in the crate'\''s src/ directory)]:OUTPUT_DIR:_files' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
'::path -- Path to the crate directory to generate migrations for \[default\: current directory\]:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cot__migration__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-migration-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(make)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(cli)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cot__cli_commands" \
"*::: :->cli" \
&& ret=0

    case $state in
    (cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-cli-command-$line[1]:"
        case $line[1] in
            (manpages)
_arguments "${_arguments_options[@]}" : \
'-o+[Directory to write the manpages to \[default\: current directory\]]:OUTPUT_DIR:_files' \
'--output-dir=[Directory to write the manpages to \[default\: current directory\]]:OUTPUT_DIR:_files' \
'-c[Create the directory if it doesn'\''t exist]' \
'--create[Create the directory if it doesn'\''t exist]' \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'*-v[Increase logging verbosity]' \
'*--verbose[Increase logging verbosity]' \
'(-v --verbose)*-q[Decrease logging verbosity]' \
'(-v --verbose)*--quiet[Decrease logging verbosity]' \
'-h[Print help]' \
'--help[Print help]' \
':shell -- Shell to generate completions for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cot__cli__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-cli-help-command-$line[1]:"
        case $line[1] in
            (manpages)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cot__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(migration)
_arguments "${_arguments_options[@]}" : \
":: :_cot__help__migration_commands" \
"*::: :->migration" \
&& ret=0

    case $state in
    (migration)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-help-migration-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(make)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(cli)
_arguments "${_arguments_options[@]}" : \
":: :_cot__help__cli_commands" \
"*::: :->cli" \
&& ret=0

    case $state in
    (cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cot-help-cli-command-$line[1]:"
        case $line[1] in
            (manpages)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_cot_commands] )) ||
_cot_commands() {
    local commands; commands=(
'new:Create a new Cot project' \
'migration:Manage migrations for a Cot project' \
'cli:Manage Cot CLI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cot commands' commands "$@"
}
(( $+functions[_cot__cli_commands] )) ||
_cot__cli_commands() {
    local commands; commands=(
'manpages:Generate manpages for the Cot CLI' \
'completions:Generate completions for the Cot CLI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cot cli commands' commands "$@"
}
(( $+functions[_cot__cli__completions_commands] )) ||
_cot__cli__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cot cli completions commands' commands "$@"
}
(( $+functions[_cot__cli__help_commands] )) ||
_cot__cli__help_commands() {
    local commands; commands=(
'manpages:Generate manpages for the Cot CLI' \
'completions:Generate completions for the Cot CLI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cot cli help commands' commands "$@"
}
(( $+functions[_cot__cli__help__completions_commands] )) ||
_cot__cli__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cot cli help completions commands' commands "$@"
}
(( $+functions[_cot__cli__help__help_commands] )) ||
_cot__cli__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cot cli help help commands' commands "$@"
}
(( $+functions[_cot__cli__help__manpages_commands] )) ||
_cot__cli__help__manpages_commands() {
    local commands; commands=()
    _describe -t commands 'cot cli help manpages commands' commands "$@"
}
(( $+functions[_cot__cli__manpages_commands] )) ||
_cot__cli__manpages_commands() {
    local commands; commands=()
    _describe -t commands 'cot cli manpages commands' commands "$@"
}
(( $+functions[_cot__help_commands] )) ||
_cot__help_commands() {
    local commands; commands=(
'new:Create a new Cot project' \
'migration:Manage migrations for a Cot project' \
'cli:Manage Cot CLI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cot help commands' commands "$@"
}
(( $+functions[_cot__help__cli_commands] )) ||
_cot__help__cli_commands() {
    local commands; commands=(
'manpages:Generate manpages for the Cot CLI' \
'completions:Generate completions for the Cot CLI' \
    )
    _describe -t commands 'cot help cli commands' commands "$@"
}
(( $+functions[_cot__help__cli__completions_commands] )) ||
_cot__help__cli__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cot help cli completions commands' commands "$@"
}
(( $+functions[_cot__help__cli__manpages_commands] )) ||
_cot__help__cli__manpages_commands() {
    local commands; commands=()
    _describe -t commands 'cot help cli manpages commands' commands "$@"
}
(( $+functions[_cot__help__help_commands] )) ||
_cot__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cot help help commands' commands "$@"
}
(( $+functions[_cot__help__migration_commands] )) ||
_cot__help__migration_commands() {
    local commands; commands=(
'list:List all migrations for a Cot project' \
'make:Generate migrations for a Cot project' \
    )
    _describe -t commands 'cot help migration commands' commands "$@"
}
(( $+functions[_cot__help__migration__list_commands] )) ||
_cot__help__migration__list_commands() {
    local commands; commands=()
    _describe -t commands 'cot help migration list commands' commands "$@"
}
(( $+functions[_cot__help__migration__make_commands] )) ||
_cot__help__migration__make_commands() {
    local commands; commands=()
    _describe -t commands 'cot help migration make commands' commands "$@"
}
(( $+functions[_cot__help__new_commands] )) ||
_cot__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'cot help new commands' commands "$@"
}
(( $+functions[_cot__migration_commands] )) ||
_cot__migration_commands() {
    local commands; commands=(
'list:List all migrations for a Cot project' \
'make:Generate migrations for a Cot project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cot migration commands' commands "$@"
}
(( $+functions[_cot__migration__help_commands] )) ||
_cot__migration__help_commands() {
    local commands; commands=(
'list:List all migrations for a Cot project' \
'make:Generate migrations for a Cot project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cot migration help commands' commands "$@"
}
(( $+functions[_cot__migration__help__help_commands] )) ||
_cot__migration__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cot migration help help commands' commands "$@"
}
(( $+functions[_cot__migration__help__list_commands] )) ||
_cot__migration__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'cot migration help list commands' commands "$@"
}
(( $+functions[_cot__migration__help__make_commands] )) ||
_cot__migration__help__make_commands() {
    local commands; commands=()
    _describe -t commands 'cot migration help make commands' commands "$@"
}
(( $+functions[_cot__migration__list_commands] )) ||
_cot__migration__list_commands() {
    local commands; commands=()
    _describe -t commands 'cot migration list commands' commands "$@"
}
(( $+functions[_cot__migration__make_commands] )) ||
_cot__migration__make_commands() {
    local commands; commands=()
    _describe -t commands 'cot migration make commands' commands "$@"
}
(( $+functions[_cot__new_commands] )) ||
_cot__new_commands() {
    local commands; commands=()
    _describe -t commands 'cot new commands' commands "$@"
}

if [ "$funcstack[1]" = "_cot" ]; then
    _cot "$@"
else
    compdef _cot cot
fi

----- stderr -----
